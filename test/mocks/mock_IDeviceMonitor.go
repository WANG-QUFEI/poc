// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	context "context"

	api "example.poc/device-monitoring-system/internal/api"

	mock "github.com/stretchr/testify/mock"
)

// MockIDeviceMonitor is an autogenerated mock type for the IDeviceMonitor type
type MockIDeviceMonitor struct {
	mock.Mock
}

type MockIDeviceMonitor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIDeviceMonitor) EXPECT() *MockIDeviceMonitor_Expecter {
	return &MockIDeviceMonitor_Expecter{mock: &_m.Mock}
}

// PollDevice provides a mock function with given fields: _a0, _a1
func (_m *MockIDeviceMonitor) PollDevice(_a0 context.Context, _a1 api.PollDeviceRequest) (*api.PollDeviceResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for PollDevice")
	}

	var r0 *api.PollDeviceResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, api.PollDeviceRequest) (*api.PollDeviceResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, api.PollDeviceRequest) *api.PollDeviceResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.PollDeviceResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, api.PollDeviceRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIDeviceMonitor_PollDevice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PollDevice'
type MockIDeviceMonitor_PollDevice_Call struct {
	*mock.Call
}

// PollDevice is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 api.PollDeviceRequest
func (_e *MockIDeviceMonitor_Expecter) PollDevice(_a0 interface{}, _a1 interface{}) *MockIDeviceMonitor_PollDevice_Call {
	return &MockIDeviceMonitor_PollDevice_Call{Call: _e.mock.On("PollDevice", _a0, _a1)}
}

func (_c *MockIDeviceMonitor_PollDevice_Call) Run(run func(_a0 context.Context, _a1 api.PollDeviceRequest)) *MockIDeviceMonitor_PollDevice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(api.PollDeviceRequest))
	})
	return _c
}

func (_c *MockIDeviceMonitor_PollDevice_Call) Return(_a0 *api.PollDeviceResponse, _a1 error) *MockIDeviceMonitor_PollDevice_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIDeviceMonitor_PollDevice_Call) RunAndReturn(run func(context.Context, api.PollDeviceRequest) (*api.PollDeviceResponse, error)) *MockIDeviceMonitor_PollDevice_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIDeviceMonitor creates a new instance of MockIDeviceMonitor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIDeviceMonitor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIDeviceMonitor {
	mock := &MockIDeviceMonitor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
