// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	repository "example.poc/device-monitoring-system/internal/repository"
	mock "github.com/stretchr/testify/mock"
)

// MockIRepository is an autogenerated mock type for the IRepository type
type MockIRepository struct {
	mock.Mock
}

type MockIRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIRepository) EXPECT() *MockIRepository_Expecter {
	return &MockIRepository_Expecter{mock: &_m.Mock}
}

// CreateDevice provides a mock function with given fields: device
func (_m *MockIRepository) CreateDevice(device *repository.Device) error {
	ret := _m.Called(device)

	if len(ret) == 0 {
		panic("no return value specified for CreateDevice")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*repository.Device) error); ok {
		r0 = rf(device)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIRepository_CreateDevice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDevice'
type MockIRepository_CreateDevice_Call struct {
	*mock.Call
}

// CreateDevice is a helper method to define mock.On call
//   - device *repository.Device
func (_e *MockIRepository_Expecter) CreateDevice(device interface{}) *MockIRepository_CreateDevice_Call {
	return &MockIRepository_CreateDevice_Call{Call: _e.mock.On("CreateDevice", device)}
}

func (_c *MockIRepository_CreateDevice_Call) Run(run func(device *repository.Device)) *MockIRepository_CreateDevice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*repository.Device))
	})
	return _c
}

func (_c *MockIRepository_CreateDevice_Call) Return(_a0 error) *MockIRepository_CreateDevice_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIRepository_CreateDevice_Call) RunAndReturn(run func(*repository.Device) error) *MockIRepository_CreateDevice_Call {
	_c.Call.Return(run)
	return _c
}

// CreateDeviceTypes provides a mock function with given fields: _a0
func (_m *MockIRepository) CreateDeviceTypes(_a0 []*repository.DeviceType) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateDeviceTypes")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]*repository.DeviceType) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIRepository_CreateDeviceTypes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDeviceTypes'
type MockIRepository_CreateDeviceTypes_Call struct {
	*mock.Call
}

// CreateDeviceTypes is a helper method to define mock.On call
//   - _a0 []*repository.DeviceType
func (_e *MockIRepository_Expecter) CreateDeviceTypes(_a0 interface{}) *MockIRepository_CreateDeviceTypes_Call {
	return &MockIRepository_CreateDeviceTypes_Call{Call: _e.mock.On("CreateDeviceTypes", _a0)}
}

func (_c *MockIRepository_CreateDeviceTypes_Call) Run(run func(_a0 []*repository.DeviceType)) *MockIRepository_CreateDeviceTypes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]*repository.DeviceType))
	})
	return _c
}

func (_c *MockIRepository_CreateDeviceTypes_Call) Return(_a0 error) *MockIRepository_CreateDeviceTypes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIRepository_CreateDeviceTypes_Call) RunAndReturn(run func([]*repository.DeviceType) error) *MockIRepository_CreateDeviceTypes_Call {
	_c.Call.Return(run)
	return _c
}

// CreateDevices provides a mock function with given fields: devices
func (_m *MockIRepository) CreateDevices(devices []*repository.Device) error {
	ret := _m.Called(devices)

	if len(ret) == 0 {
		panic("no return value specified for CreateDevices")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]*repository.Device) error); ok {
		r0 = rf(devices)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIRepository_CreateDevices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDevices'
type MockIRepository_CreateDevices_Call struct {
	*mock.Call
}

// CreateDevices is a helper method to define mock.On call
//   - devices []*repository.Device
func (_e *MockIRepository_Expecter) CreateDevices(devices interface{}) *MockIRepository_CreateDevices_Call {
	return &MockIRepository_CreateDevices_Call{Call: _e.mock.On("CreateDevices", devices)}
}

func (_c *MockIRepository_CreateDevices_Call) Run(run func(devices []*repository.Device)) *MockIRepository_CreateDevices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]*repository.Device))
	})
	return _c
}

func (_c *MockIRepository_CreateDevices_Call) Return(_a0 error) *MockIRepository_CreateDevices_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIRepository_CreateDevices_Call) RunAndReturn(run func([]*repository.Device) error) *MockIRepository_CreateDevices_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePollingHistories provides a mock function with given fields: histories
func (_m *MockIRepository) CreatePollingHistories(histories []*repository.PollingHistory) error {
	ret := _m.Called(histories)

	if len(ret) == 0 {
		panic("no return value specified for CreatePollingHistories")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]*repository.PollingHistory) error); ok {
		r0 = rf(histories)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIRepository_CreatePollingHistories_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePollingHistories'
type MockIRepository_CreatePollingHistories_Call struct {
	*mock.Call
}

// CreatePollingHistories is a helper method to define mock.On call
//   - histories []*repository.PollingHistory
func (_e *MockIRepository_Expecter) CreatePollingHistories(histories interface{}) *MockIRepository_CreatePollingHistories_Call {
	return &MockIRepository_CreatePollingHistories_Call{Call: _e.mock.On("CreatePollingHistories", histories)}
}

func (_c *MockIRepository_CreatePollingHistories_Call) Run(run func(histories []*repository.PollingHistory)) *MockIRepository_CreatePollingHistories_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]*repository.PollingHistory))
	})
	return _c
}

func (_c *MockIRepository_CreatePollingHistories_Call) Return(_a0 error) *MockIRepository_CreatePollingHistories_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIRepository_CreatePollingHistories_Call) RunAndReturn(run func([]*repository.PollingHistory) error) *MockIRepository_CreatePollingHistories_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePollingHistory provides a mock function with given fields: history
func (_m *MockIRepository) CreatePollingHistory(history *repository.PollingHistory) error {
	ret := _m.Called(history)

	if len(ret) == 0 {
		panic("no return value specified for CreatePollingHistory")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*repository.PollingHistory) error); ok {
		r0 = rf(history)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIRepository_CreatePollingHistory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePollingHistory'
type MockIRepository_CreatePollingHistory_Call struct {
	*mock.Call
}

// CreatePollingHistory is a helper method to define mock.On call
//   - history *repository.PollingHistory
func (_e *MockIRepository_Expecter) CreatePollingHistory(history interface{}) *MockIRepository_CreatePollingHistory_Call {
	return &MockIRepository_CreatePollingHistory_Call{Call: _e.mock.On("CreatePollingHistory", history)}
}

func (_c *MockIRepository_CreatePollingHistory_Call) Run(run func(history *repository.PollingHistory)) *MockIRepository_CreatePollingHistory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*repository.PollingHistory))
	})
	return _c
}

func (_c *MockIRepository_CreatePollingHistory_Call) Return(_a0 error) *MockIRepository_CreatePollingHistory_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIRepository_CreatePollingHistory_Call) RunAndReturn(run func(*repository.PollingHistory) error) *MockIRepository_CreatePollingHistory_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllDeviceTypes provides a mock function with no fields
func (_m *MockIRepository) GetAllDeviceTypes() ([]repository.DeviceType, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllDeviceTypes")
	}

	var r0 []repository.DeviceType
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]repository.DeviceType, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []repository.DeviceType); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.DeviceType)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIRepository_GetAllDeviceTypes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllDeviceTypes'
type MockIRepository_GetAllDeviceTypes_Call struct {
	*mock.Call
}

// GetAllDeviceTypes is a helper method to define mock.On call
func (_e *MockIRepository_Expecter) GetAllDeviceTypes() *MockIRepository_GetAllDeviceTypes_Call {
	return &MockIRepository_GetAllDeviceTypes_Call{Call: _e.mock.On("GetAllDeviceTypes")}
}

func (_c *MockIRepository_GetAllDeviceTypes_Call) Run(run func()) *MockIRepository_GetAllDeviceTypes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockIRepository_GetAllDeviceTypes_Call) Return(_a0 []repository.DeviceType, _a1 error) *MockIRepository_GetAllDeviceTypes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIRepository_GetAllDeviceTypes_Call) RunAndReturn(run func() ([]repository.DeviceType, error)) *MockIRepository_GetAllDeviceTypes_Call {
	_c.Call.Return(run)
	return _c
}

// GetDeviceByID provides a mock function with given fields: deviceID
func (_m *MockIRepository) GetDeviceByID(deviceID string) (*repository.Device, error) {
	ret := _m.Called(deviceID)

	if len(ret) == 0 {
		panic("no return value specified for GetDeviceByID")
	}

	var r0 *repository.Device
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*repository.Device, error)); ok {
		return rf(deviceID)
	}
	if rf, ok := ret.Get(0).(func(string) *repository.Device); ok {
		r0 = rf(deviceID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.Device)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(deviceID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIRepository_GetDeviceByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDeviceByID'
type MockIRepository_GetDeviceByID_Call struct {
	*mock.Call
}

// GetDeviceByID is a helper method to define mock.On call
//   - deviceID string
func (_e *MockIRepository_Expecter) GetDeviceByID(deviceID interface{}) *MockIRepository_GetDeviceByID_Call {
	return &MockIRepository_GetDeviceByID_Call{Call: _e.mock.On("GetDeviceByID", deviceID)}
}

func (_c *MockIRepository_GetDeviceByID_Call) Run(run func(deviceID string)) *MockIRepository_GetDeviceByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockIRepository_GetDeviceByID_Call) Return(_a0 *repository.Device, _a1 error) *MockIRepository_GetDeviceByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIRepository_GetDeviceByID_Call) RunAndReturn(run func(string) (*repository.Device, error)) *MockIRepository_GetDeviceByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetDevicePollingHistory provides a mock function with given fields: deviceID, limit
func (_m *MockIRepository) GetDevicePollingHistory(deviceID string, limit int) ([]repository.PollingHistory, error) {
	ret := _m.Called(deviceID, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetDevicePollingHistory")
	}

	var r0 []repository.PollingHistory
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int) ([]repository.PollingHistory, error)); ok {
		return rf(deviceID, limit)
	}
	if rf, ok := ret.Get(0).(func(string, int) []repository.PollingHistory); ok {
		r0 = rf(deviceID, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.PollingHistory)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(deviceID, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIRepository_GetDevicePollingHistory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDevicePollingHistory'
type MockIRepository_GetDevicePollingHistory_Call struct {
	*mock.Call
}

// GetDevicePollingHistory is a helper method to define mock.On call
//   - deviceID string
//   - limit int
func (_e *MockIRepository_Expecter) GetDevicePollingHistory(deviceID interface{}, limit interface{}) *MockIRepository_GetDevicePollingHistory_Call {
	return &MockIRepository_GetDevicePollingHistory_Call{Call: _e.mock.On("GetDevicePollingHistory", deviceID, limit)}
}

func (_c *MockIRepository_GetDevicePollingHistory_Call) Run(run func(deviceID string, limit int)) *MockIRepository_GetDevicePollingHistory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int))
	})
	return _c
}

func (_c *MockIRepository_GetDevicePollingHistory_Call) Return(_a0 []repository.PollingHistory, _a1 error) *MockIRepository_GetDevicePollingHistory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIRepository_GetDevicePollingHistory_Call) RunAndReturn(run func(string, int) ([]repository.PollingHistory, error)) *MockIRepository_GetDevicePollingHistory_Call {
	_c.Call.Return(run)
	return _c
}

// GetDeviceTypeByName provides a mock function with given fields: name
func (_m *MockIRepository) GetDeviceTypeByName(name string) (*repository.DeviceType, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetDeviceTypeByName")
	}

	var r0 *repository.DeviceType
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*repository.DeviceType, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *repository.DeviceType); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repository.DeviceType)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIRepository_GetDeviceTypeByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDeviceTypeByName'
type MockIRepository_GetDeviceTypeByName_Call struct {
	*mock.Call
}

// GetDeviceTypeByName is a helper method to define mock.On call
//   - name string
func (_e *MockIRepository_Expecter) GetDeviceTypeByName(name interface{}) *MockIRepository_GetDeviceTypeByName_Call {
	return &MockIRepository_GetDeviceTypeByName_Call{Call: _e.mock.On("GetDeviceTypeByName", name)}
}

func (_c *MockIRepository_GetDeviceTypeByName_Call) Run(run func(name string)) *MockIRepository_GetDeviceTypeByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockIRepository_GetDeviceTypeByName_Call) Return(_a0 *repository.DeviceType, _a1 error) *MockIRepository_GetDeviceTypeByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIRepository_GetDeviceTypeByName_Call) RunAndReturn(run func(string) (*repository.DeviceType, error)) *MockIRepository_GetDeviceTypeByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetDevicesByPage provides a mock function with given fields: page, size, condition
func (_m *MockIRepository) GetDevicesByPage(page int, size int, condition string) ([]repository.Device, int, error) {
	ret := _m.Called(page, size, condition)

	if len(ret) == 0 {
		panic("no return value specified for GetDevicesByPage")
	}

	var r0 []repository.Device
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int, string) ([]repository.Device, int, error)); ok {
		return rf(page, size, condition)
	}
	if rf, ok := ret.Get(0).(func(int, int, string) []repository.Device); ok {
		r0 = rf(page, size, condition)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.Device)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int, string) int); ok {
		r1 = rf(page, size, condition)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(int, int, string) error); ok {
		r2 = rf(page, size, condition)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockIRepository_GetDevicesByPage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDevicesByPage'
type MockIRepository_GetDevicesByPage_Call struct {
	*mock.Call
}

// GetDevicesByPage is a helper method to define mock.On call
//   - page int
//   - size int
//   - condition string
func (_e *MockIRepository_Expecter) GetDevicesByPage(page interface{}, size interface{}, condition interface{}) *MockIRepository_GetDevicesByPage_Call {
	return &MockIRepository_GetDevicesByPage_Call{Call: _e.mock.On("GetDevicesByPage", page, size, condition)}
}

func (_c *MockIRepository_GetDevicesByPage_Call) Run(run func(page int, size int, condition string)) *MockIRepository_GetDevicesByPage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int), args[2].(string))
	})
	return _c
}

func (_c *MockIRepository_GetDevicesByPage_Call) Return(_a0 []repository.Device, _a1 int, _a2 error) *MockIRepository_GetDevicesByPage_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockIRepository_GetDevicesByPage_Call) RunAndReturn(run func(int, int, string) ([]repository.Device, int, error)) *MockIRepository_GetDevicesByPage_Call {
	_c.Call.Return(run)
	return _c
}

// GetDevicesByPollingParameter provides a mock function with given fields: _a0
func (_m *MockIRepository) GetDevicesByPollingParameter(_a0 repository.DevicePollingParameter) ([]repository.Device, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetDevicesByPollingParameter")
	}

	var r0 []repository.Device
	var r1 error
	if rf, ok := ret.Get(0).(func(repository.DevicePollingParameter) ([]repository.Device, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(repository.DevicePollingParameter) []repository.Device); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]repository.Device)
		}
	}

	if rf, ok := ret.Get(1).(func(repository.DevicePollingParameter) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIRepository_GetDevicesByPollingParameter_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDevicesByPollingParameter'
type MockIRepository_GetDevicesByPollingParameter_Call struct {
	*mock.Call
}

// GetDevicesByPollingParameter is a helper method to define mock.On call
//   - _a0 repository.DevicePollingParameter
func (_e *MockIRepository_Expecter) GetDevicesByPollingParameter(_a0 interface{}) *MockIRepository_GetDevicesByPollingParameter_Call {
	return &MockIRepository_GetDevicesByPollingParameter_Call{Call: _e.mock.On("GetDevicesByPollingParameter", _a0)}
}

func (_c *MockIRepository_GetDevicesByPollingParameter_Call) Run(run func(_a0 repository.DevicePollingParameter)) *MockIRepository_GetDevicesByPollingParameter_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(repository.DevicePollingParameter))
	})
	return _c
}

func (_c *MockIRepository_GetDevicesByPollingParameter_Call) Return(_a0 []repository.Device, _a1 error) *MockIRepository_GetDevicesByPollingParameter_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIRepository_GetDevicesByPollingParameter_Call) RunAndReturn(run func(repository.DevicePollingParameter) ([]repository.Device, error)) *MockIRepository_GetDevicesByPollingParameter_Call {
	_c.Call.Return(run)
	return _c
}

// RestoreDevice provides a mock function with given fields: _a0
func (_m *MockIRepository) RestoreDevice(_a0 uint) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for RestoreDevice")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIRepository_RestoreDevice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RestoreDevice'
type MockIRepository_RestoreDevice_Call struct {
	*mock.Call
}

// RestoreDevice is a helper method to define mock.On call
//   - _a0 uint
func (_e *MockIRepository_Expecter) RestoreDevice(_a0 interface{}) *MockIRepository_RestoreDevice_Call {
	return &MockIRepository_RestoreDevice_Call{Call: _e.mock.On("RestoreDevice", _a0)}
}

func (_c *MockIRepository_RestoreDevice_Call) Run(run func(_a0 uint)) *MockIRepository_RestoreDevice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *MockIRepository_RestoreDevice_Call) Return(_a0 error) *MockIRepository_RestoreDevice_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIRepository_RestoreDevice_Call) RunAndReturn(run func(uint) error) *MockIRepository_RestoreDevice_Call {
	_c.Call.Return(run)
	return _c
}

// RestoreDeviceType provides a mock function with given fields: _a0
func (_m *MockIRepository) RestoreDeviceType(_a0 uint) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for RestoreDeviceType")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIRepository_RestoreDeviceType_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RestoreDeviceType'
type MockIRepository_RestoreDeviceType_Call struct {
	*mock.Call
}

// RestoreDeviceType is a helper method to define mock.On call
//   - _a0 uint
func (_e *MockIRepository_Expecter) RestoreDeviceType(_a0 interface{}) *MockIRepository_RestoreDeviceType_Call {
	return &MockIRepository_RestoreDeviceType_Call{Call: _e.mock.On("RestoreDeviceType", _a0)}
}

func (_c *MockIRepository_RestoreDeviceType_Call) Run(run func(_a0 uint)) *MockIRepository_RestoreDeviceType_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint))
	})
	return _c
}

func (_c *MockIRepository_RestoreDeviceType_Call) Return(_a0 error) *MockIRepository_RestoreDeviceType_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIRepository_RestoreDeviceType_Call) RunAndReturn(run func(uint) error) *MockIRepository_RestoreDeviceType_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateDevice provides a mock function with given fields: device
func (_m *MockIRepository) UpdateDevice(device *repository.Device) error {
	ret := _m.Called(device)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDevice")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*repository.Device) error); ok {
		r0 = rf(device)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIRepository_UpdateDevice_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateDevice'
type MockIRepository_UpdateDevice_Call struct {
	*mock.Call
}

// UpdateDevice is a helper method to define mock.On call
//   - device *repository.Device
func (_e *MockIRepository_Expecter) UpdateDevice(device interface{}) *MockIRepository_UpdateDevice_Call {
	return &MockIRepository_UpdateDevice_Call{Call: _e.mock.On("UpdateDevice", device)}
}

func (_c *MockIRepository_UpdateDevice_Call) Run(run func(device *repository.Device)) *MockIRepository_UpdateDevice_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*repository.Device))
	})
	return _c
}

func (_c *MockIRepository_UpdateDevice_Call) Return(_a0 error) *MockIRepository_UpdateDevice_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIRepository_UpdateDevice_Call) RunAndReturn(run func(*repository.Device) error) *MockIRepository_UpdateDevice_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIRepository creates a new instance of MockIRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIRepository {
	mock := &MockIRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
